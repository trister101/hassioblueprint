blueprint:
  name: night motion lights
  description: >
     Turn lights to Max then after delay off and then after delay return to original state
  domain: automation
#  source_url: 
  input:
    activated:
        name: Activated
        description: "Turn lights to Max then after delay off and then after delay return to original state"
        selector:
            entity:
    target_lights:
        name: Lights
        description: "On max, off the restore inital state"
        selector:
          target:
            entity:
              domain: light
    delay_off:
      name: (OPTIONAL) Off Delay
      description: "Off Delay"
      default: 1000
      selector:
        number:
          min: 0
          max: 20000
          unit_of_measurement: miliseconds
    delay_restore:
      name: (OPTIONAL) Restore Delay
      description: "Restore Delay"
      default: 1
      selector:
        number:
          min: 0
          max: 2400
          unit_of_measurement: seconds
          
mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input activated
    to: 'on'

variables:
  activated: !input activated
#  delay: !input delay
  delay_off: !input delay_off
  delay_restore: !input delay_restore
  target_lights: !input target_lights

condition: []

action:
  - service: scene.create
    data:
        scene_id: all_lights_snapshot
        snapshot_entities: >
               {% set lights = states.light
                 | map(attribute='entity_id') | join(',') %}
                 {{lights}}
#  - service: light.turn_on
#    target: !input target_lights
  - service: light.turn_on
    target: !input target_lights
    data_template:
      brightness: 254
  - delay: 
      milliseconds: "{{ delay_off }}"
#  - service: light.toggle
  - service: light.turn_off
    target: !input target_lights
  - delay: 
      seconds: "{{ delay_restore }}"
  - service: scene.turn_on
    data:
      entity_id: scene.all_lights_snapshot
